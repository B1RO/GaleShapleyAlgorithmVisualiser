[{"C:\\Code\\gale_shapey\\src\\index.tsx":"1","C:\\Code\\gale_shapey\\src\\reportWebVitals.ts":"2","C:\\Code\\gale_shapey\\src\\App.tsx":"3","C:\\code\\gale_shapey\\src\\index.tsx":"4","C:\\code\\gale_shapey\\src\\reportWebVitals.ts":"5","C:\\code\\gale_shapey\\src\\App.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":11385,"mtime":1612272354798,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":11397,"mtime":1612189609628,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"z9882b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1cbcpue",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Code\\gale_shapey\\src\\index.tsx",[],["30","31"],"C:\\Code\\gale_shapey\\src\\reportWebVitals.ts",[],"C:\\Code\\gale_shapey\\src\\App.tsx",["32","33","34","35","36","37","38","39","40","41","42","43"],"C:\\code\\gale_shapey\\src\\index.tsx",[],["44","45"],"C:\\code\\gale_shapey\\src\\reportWebVitals.ts",[],"C:\\code\\gale_shapey\\src\\App.tsx",["46","47","48","49","50","51","52","53","54","55","56"],"import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\n\n\ntype Matches = { [key: string]: string }\ntype Preferences = { [key: string]: string[] }\n\nfunction isLetter(c : any) {\n    return c.toLowerCase() != c.toUpperCase();\n}\n\nfunction useInterval(callback : any, delay: any) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            // @ts-ignore\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nfunction App() {\n    let [matches, setMatches] = useState<Matches>({})\n\n    let [initialBs,setInitialBs] = useState<Preferences>(null as any);\n\n    let [initialAs, setInitialAs] = useState<Preferences>(null as any);\n\n    let [as, setAs] = useState<Preferences>(null as any);\n    let [bs, setBs] = useState<Preferences>(null as any);\n    let [index, setIndex] = useState(0);\n\n    useEffect(()=>{\n        if(initialAs != null && initialBs != null)\n        {\n            setAs(initialAs);\n            setBs(initialBs);\n        }\n    }, [initialAs,initialBs]);\n\n    let [aInput, setAInput] = useState(\"a1 : b4 \u001f b3 \u001f b1 \u001f b2\\na2 : b2 \u001f b4 \u001f b1 \u001f b3\\na3 : b4 \u001f b1 \u001f b2 \u001f b3\\na4 : b3 \u001f b2 \u001f b1 \u001f b4\");\n    let [bInput, setBInput] = useState(\"b1 : a1 \u001f a3 \u001f a4 \u001f a2\\nb2 : a1 \u001f a3 \u001f a2 \u001f a4\\nb3 : a2 \u001f a1 \u001f a3 \u001f a4\\nb4 : a2 \u001f a4 \u001f a1 \u001f a3\");\n    let [run, setRun] = useState(false);\n\n    useInterval(() => {\n        if(run)\n            foo(false);\n    }, 1000);\n\n    let foo = (cont : boolean) => {\n        if (Object.keys(matches).length !== Object.keys(bs).length) {\n            let b = Object.keys(bs)[index];\n            if (Object.values(matches).findIndex(bMatch => bMatch === b) === -1) {\n                let preferences = bs[b];\n                let preferredMatch = preferences[0];\n                setBs({...bs, [b]: bs[b].slice(1)})\n                if (Object.keys(matches).findIndex(a => a === preferredMatch) === -1) {\n                    setMatches({...matches, [preferredMatch]: b});\n                } else if (as[preferredMatch].indexOf(b) < as[preferredMatch].indexOf(matches[preferredMatch])) {\n                    setMatches({...matches, [preferredMatch]: b});\n                }\n            }\n\n            if (index + 1 === Object.keys(as).length) {\n                setIndex(0);\n            } else {\n                setIndex(index + 1);\n            }\n        }\n    }\n\n    if(as == null || bs == null)\n    {\n        return <div style={{\"display\" : 'flex', alignItems : \"center\", justifyContent : \"center\", flexDirection : \"column\"}}>\n            <div>Please fill in the inputs:</div>\n            <div style={{fontSize : 16}}>Note that we try to guess the separator, so you shoulnd't have to worry about that :)</div>\n        <div style={{display : \"flex\", flexDirection : \"row\", alignItems : \"space-around\", justifyContent : \"space-around\", height : \"70vh\", width : \"100vw\", padding : 128}}>\n            <div>\n            <div>As:</div>\n            <div style={{fontSize : 14}}>(e.g. : a1 : b1,b2,b3)</div>\n            <textarea\n                value={aInput}\n                onChange={(e)=>{\n                setAInput(e.currentTarget.value as any)\n            }} rows={20} cols={64}/>\n            </div>\n            <div>\n            <div>Bs:</div>\n            <div style={{fontSize : 14}}>(e.g. : b1 : a2,a1,a3)</div>\n            <textarea\n                onChange={(e)=> {\n                    setBInput(e.currentTarget.value as any)\n                }}\n                value={bInput} rows={20} cols={64}/>\n            </div>\n        </div>\n            <div className=\"multi-button\">\n            <button style={{width: \"\"}} onClick={(e) => {\n                // @ts-ignore\n                var weirdCharOccurences = Object.fromEntries(Object.entries([...aInput].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {})).filter(([char, occurence])=>!isLetter(char) && isNaN(char)));\n                var lineCount = aInput.split('\\n').length;\n                var keyPairSeparator = Object.entries(weirdCharOccurences).filter(([char, count])=>{\n                    return count == lineCount;\n                })[0][0]\n               var preferenceSeparator =  Object.entries(weirdCharOccurences).filter(([char, count])=>{\n                   return count != lineCount;\n               })[0][0];\n                let as = Object.fromEntries(aInput.split('\\n').map(line=>{\n                    let [key, valueAsStr] = line.split(keyPairSeparator)\n                    return [key.trim(), valueAsStr.split(preferenceSeparator).map(x=>x.trim())]\n                }));\n\n                // @ts-ignore\n                var weirdCharOccurences2 = Object.fromEntries(Object.entries([...bInput].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {})).filter(([char, occurence])=>!isLetter(char) && isNaN(char)));\n                var lineCount2 = bInput.split('\\n').length;\n                var keyPairSeparator2 = Object.entries(weirdCharOccurences2).filter(([char, count])=>{\n                    return count == lineCount2;\n                })[0][0]\n                var preferenceSeparator2 =  Object.entries(weirdCharOccurences2).filter(([char, count])=>{\n                    return count != lineCount2;\n                })[0][0];\n                let bs = Object.fromEntries(bInput.split('\\n').map(line=>{\n                    let [key, valueAsStr] = line.split(keyPairSeparator)\n                    return [key.trim(), valueAsStr.split(preferenceSeparator).map(x=>x.trim())]\n                }));\n                setInitialAs(as);\n                setInitialBs(bs);\n            }}>\n                Continue\n            </button>\n        </div>\n        </div>\n    }\n    else\n    {\n        return <div style={{backgroundColor: \"#ECEFF1\", width: '100vw', height: '100vh', display : 'flex', flexDirection : \"column\", alignItems : \"center\"}}>\n            <div style={{height : \"30vh\", paddingTop : 28}}>\n                Matches :\n                {Object.entries(matches).map(([a,b])=>{\n                    return <div style={{fontSize : 16}}>{a} - {b}</div>\n                })}\n            </div>\n            <div style={{display: \"flex\", justifyContent: \"space-around\", width: \"90vw\", height: \"50vh\"}}>\n                <div style={{\n                    margin: 48,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                    flexGrow: 1,\n                    height: \"80%\"\n                }}>\n                    {Object.entries(initialBs).map(([b\n                                                        , preferences]) => {\n                        let chosenIndex = initialBs[b].findIndex(x => matches[x] === b);\n                        let possibleChoiceStartIndex = initialBs[b].length - bs[b].length;\n                        return <div style={{\n                            display: \"flex\",\n                            alignContent: \"center\",\n                            flexGrow: 1,\n                            flexDirection: \"row\",\n                            height: \"100%\",\n                            justifyContent: \"center\"\n                        }}>\n                            <div style={{\n                                backgroundColor: b == Object.keys(bs)[index] ? \"#FDD835\" : \"#FFEB3B\",\n                                width: 64\n                            }}>{b}</div>\n                            {preferences.map((preference, preferenceIndex) =>\n                                <div style={{\n                                    display: \"flex\",\n                                    flexGrow: 1,\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: 16,\n                                    fontWeight: 1000,\n                                    textAlign: \"center\",\n                                    backgroundColor: chosenIndex == preferenceIndex ? \"#2E7D32\" : preferenceIndex >=\n                                                                                                  possibleChoiceStartIndex ? \"#66BB6A\" : \"#C8E6C9\"\n                                }}>{preference}, </div>)}</div>\n                    })}\n                </div>\n                <div style={{\n                    margin: 48,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                    flexGrow: 1,\n                    height: \"80%\"\n                }}>\n                    {Object.entries(initialAs).map(([a\n                                                        , preferences]) => {\n                        let chosenIndex = initialAs[a].findIndex(b=>b===matches[a]);\n                        let possibleChoiceStartIndex = initialAs[a].length - as[a].length;\n                        return <div style={{\n                            display: \"flex\",\n                            alignContent: \"center\",\n                            flexGrow: 1,\n                            flexDirection: \"row\",\n                            height: \"100%\",\n                            justifyContent: \"center\"\n                        }}>\n                            <div style={{\n                                backgroundColor: a == Object.keys(bs)[index] ? \"#2E7D32\" : \"#66BB6A\",\n                                width: 64\n                            }}>{a}</div>\n                            {preferences.map((preference, preferenceIndex) =>\n                                <div style={{\n                                    display: \"flex\",\n                                    flexGrow: 1,\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: 16,\n                                    fontWeight: 1000,\n                                    textAlign: \"center\",\n                                    backgroundColor: chosenIndex == preferenceIndex ? \"#FDD835\" : preferenceIndex >=\n                                                                                                  possibleChoiceStartIndex ? \"#FFEB3B\" : \"#FFF9C4\"\n                                }}>{preference}, </div>)}</div>\n                    })}\n                </div>\n            </div>\n            <div style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                <div className=\"multi-button\">\n                    <button style={{width: \"\"}} onClick={() => {\n                        foo(false);\n                    }}>\n                        Step by step\n                    </button>\n                    <button style={{width: \"\"}} onClick={() => {\n                        setRun(true);\n                    }}>\n                        Run\n                    </button>\n                </div>\n            </div>\n            {/*<div>*/}\n            {/*    {Object.entries(matches).map(([a, b]) => <div>*/}\n            {/*        {b} - {a}*/}\n            {/*    </div>)}*/}\n            {/*</div>*/}\n        </div>\n    }\n\n\n}\n\nexport default App;\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":28,"nodeType":"63","messageId":"64","endLine":9,"endColumn":30},{"ruleId":"65","severity":1,"message":"66","line":42,"column":17,"nodeType":"67","messageId":"68","endLine":42,"endColumn":25},{"ruleId":"61","severity":1,"message":"69","line":111,"column":34,"nodeType":"63","messageId":"64","endLine":111,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":114,"column":33,"nodeType":"63","messageId":"64","endLine":114,"endColumn":35},{"ruleId":"65","severity":1,"message":"70","line":124,"column":21,"nodeType":"67","messageId":"68","endLine":124,"endColumn":38},{"ruleId":"61","severity":1,"message":"69","line":125,"column":34,"nodeType":"63","messageId":"64","endLine":125,"endColumn":36},{"ruleId":"65","severity":1,"message":"71","line":127,"column":21,"nodeType":"67","messageId":"68","endLine":127,"endColumn":41},{"ruleId":"61","severity":1,"message":"62","line":128,"column":34,"nodeType":"63","messageId":"64","endLine":128,"endColumn":36},{"ruleId":"61","severity":1,"message":"69","line":173,"column":52,"nodeType":"63","messageId":"64","endLine":173,"endColumn":54},{"ruleId":"61","severity":1,"message":"69","line":185,"column":66,"nodeType":"63","messageId":"64","endLine":185,"endColumn":68},{"ruleId":"61","severity":1,"message":"69","line":211,"column":52,"nodeType":"63","messageId":"64","endLine":211,"endColumn":54},{"ruleId":"61","severity":1,"message":"69","line":223,"column":66,"nodeType":"63","messageId":"64","endLine":223,"endColumn":68},{"ruleId":"57","replacedBy":"72"},{"ruleId":"59","replacedBy":"73"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":28,"nodeType":"63","messageId":"64","endLine":9,"endColumn":30},{"ruleId":"61","severity":1,"message":"69","line":114,"column":34,"nodeType":"63","messageId":"64","endLine":114,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":117,"column":33,"nodeType":"63","messageId":"64","endLine":117,"endColumn":35},{"ruleId":"65","severity":1,"message":"70","line":127,"column":21,"nodeType":"67","messageId":"68","endLine":127,"endColumn":38},{"ruleId":"61","severity":1,"message":"69","line":128,"column":34,"nodeType":"63","messageId":"64","endLine":128,"endColumn":36},{"ruleId":"65","severity":1,"message":"71","line":130,"column":21,"nodeType":"67","messageId":"68","endLine":130,"endColumn":41},{"ruleId":"61","severity":1,"message":"62","line":131,"column":34,"nodeType":"63","messageId":"64","endLine":131,"endColumn":36},{"ruleId":"61","severity":1,"message":"69","line":176,"column":52,"nodeType":"63","messageId":"64","endLine":176,"endColumn":54},{"ruleId":"61","severity":1,"message":"69","line":188,"column":66,"nodeType":"63","messageId":"64","endLine":188,"endColumn":68},{"ruleId":"61","severity":1,"message":"69","line":214,"column":52,"nodeType":"63","messageId":"64","endLine":214,"endColumn":54},{"ruleId":"61","severity":1,"message":"69","line":226,"column":66,"nodeType":"63","messageId":"64","endLine":226,"endColumn":68},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'setIndex' is assigned a value but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.","'keyPairSeparator2' is assigned a value but never used.","'preferenceSeparator2' is assigned a value but never used.",["74"],["75"],"no-global-assign","no-unsafe-negation"]
{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["isLetter","c","toLowerCase","toUpperCase","App","useState","matches","setMatches","initialBs","setInitialBs","initialAs","setInitialAs","as","setAs","bs","setBs","index","setIndex","useEffect","aInput","setAInput","bInput","setBInput","run","setRun","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","foo","cont","Object","keys","length","b","values","findIndex","bMatch","preferredMatch","slice","a","indexOf","style","alignItems","justifyContent","flexDirection","fontSize","display","height","width","padding","value","onChange","e","currentTarget","rows","cols","className","onClick","weirdCharOccurences","fromEntries","entries","reduce","filter","char","isNaN","lineCount","split","keyPairSeparator","preferenceSeparator","map","line","key","valueAsStr","trim","x","weirdCharOccurences2","lineCount2","backgroundColor","paddingTop","margin","flexGrow","preferences","chosenIndex","possibleChoiceStartIndex","alignContent","preference","preferenceIndex","fontWeight","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAOA,SAASA,EAASC,GACd,OAAOA,EAAEC,eAAiBD,EAAEE,cAwPjBC,MAhOf,WAAgB,IAAD,EACiBC,mBAAkB,IADnC,mBACNC,EADM,KACGC,EADH,OAGoBF,mBAAsB,MAH1C,mBAGNG,EAHM,KAGIC,EAHJ,OAKqBJ,mBAAsB,MAL3C,mBAKNK,EALM,KAKKC,EALL,OAOON,mBAAsB,MAP7B,mBAONO,EAPM,KAOFC,EAPE,OAQOR,mBAAsB,MAR7B,mBAQNS,EARM,KAQFC,EARE,OASaV,mBAAS,GATtB,mBASNW,EATM,KASCC,EATD,KAWXC,qBAAU,WACU,MAAbR,GAAkC,MAAbF,IAEpBK,EAAMH,GACNK,EAAMP,MAEX,CAACE,EAAUF,IAjBH,MAmBeH,mBAAS,sIAnBxB,mBAmBNc,EAnBM,KAmBEC,EAnBF,OAoBef,mBAAS,sIApBxB,mBAoBNgB,EApBM,KAoBEC,EApBF,OAqBSjB,oBAAS,GArBlB,mBAqBNkB,EArBM,KAqBDC,EArBC,MArBf,SAAqBC,EAAgBC,GACjC,IAAMC,EAAgBC,mBAGtBV,qBAAU,WACNS,EAAcE,QAAUJ,IACzB,CAACA,IAGJP,qBAAU,WAKN,GAAc,OAAVQ,EAAgB,CAChB,IAAII,EAAKC,aALb,WAEIJ,EAAcE,YAGaH,GAC3B,OAAO,kBAAMM,cAAcF,OAEhC,CAACJ,IA0BJO,EAAY,WACLV,GACCW,GAAI,KACT,KAEH,IAAIA,EAAM,SAACC,GACP,GAAIC,OAAOC,KAAK/B,GAASgC,SAAWF,OAAOC,KAAKvB,GAAIwB,OAAQ,CACxD,IAAIC,EAAIH,OAAOC,KAAKvB,GAAIE,GACxB,IAAkE,IAA9DoB,OAAOI,OAAOlC,GAASmC,WAAU,SAAAC,GAAM,OAAIA,IAAWH,KAAW,CACjE,IACII,EADc7B,EAAGyB,GACY,GACjCxB,EAAM,2BAAID,GAAL,kBAAUyB,EAAIzB,EAAGyB,GAAGK,MAAM,QACoC,IAA/DR,OAAOC,KAAK/B,GAASmC,WAAU,SAAAI,GAAC,OAAIA,IAAMF,MAEnC/B,EAAG+B,GAAgBG,QAAQP,GAAK3B,EAAG+B,GAAgBG,QAAQxC,EAAQqC,MAD1EpC,EAAW,2BAAID,GAAL,kBAAeqC,EAAiBJ,KAM9CvB,EAAQ,IAAMoB,OAAOC,KAAKzB,GAAI0B,OAC9BrB,EAAS,GAETA,EAASD,EAAQ,KAK7B,OAAS,MAANJ,GAAoB,MAANE,EAEN,sBAAKiC,MAAO,CAAC,QAAY,OAAQC,WAAa,SAAUC,eAAiB,SAAUC,cAAgB,UAAnG,UACH,6DACA,qBAAKH,MAAO,CAACI,SAAW,IAAxB,mGACJ,sBAAKJ,MAAO,CAACK,QAAU,OAAQF,cAAgB,MAAOF,WAAa,eAAgBC,eAAiB,eAAgBI,OAAS,OAAQC,MAAQ,QAASC,QAAU,KAAhK,UACI,gCACA,sCACA,qBAAKR,MAAO,CAACI,SAAW,IAAxB,oCACA,0BACIK,MAAOrC,EACPsC,SAAU,SAACC,GACXtC,EAAUsC,EAAEC,cAAcH,QAC3BI,KAAM,GAAIC,KAAM,QAEnB,gCACA,sCACA,qBAAKd,MAAO,CAACI,SAAW,IAAxB,oCACA,0BACIM,SAAU,SAACC,GACPpC,EAAUoC,EAAEC,cAAcH,QAE9BA,MAAOnC,EAAQuC,KAAM,GAAIC,KAAM,WAGnC,qBAAKC,UAAU,eAAf,SACA,wBAAQf,MAAO,CAACO,MAAO,IAAKS,QAAS,SAACL,GAElC,IAAIM,EAAsB5B,OAAO6B,YAAY7B,OAAO8B,QAAQ,YAAI/C,GAAQgD,QAAO,SAACtB,EAAGa,GAAoC,OAA5Bb,EAAEa,GAAKb,EAAEa,GAAKb,EAAEa,GAAK,EAAI,EAAUb,IAAK,KAAKuB,QAAO,mCAAEC,EAAF,iBAAsBrE,EAASqE,IAASC,MAAMD,OACzLE,EAAYpD,EAAOqD,MAAM,MAAMlC,OAC/BmC,EAAmBrC,OAAO8B,QAAQF,GAAqBI,QAAO,YAAkB,IAAD,wBAC/E,OAD+E,MAC/DG,KACjB,GAAG,GACHG,EAAuBtC,OAAO8B,QAAQF,GAAqBI,QAAO,YAAkB,IAAD,wBACnF,OADmF,MACnEG,KACjB,GAAG,GACD3D,EAAKwB,OAAO6B,YAAY9C,EAAOqD,MAAM,MAAMG,KAAI,SAAAC,GAAO,IAAD,EAC7BA,EAAKJ,MAAMC,GADkB,mBAChDI,EADgD,KAC3CC,EAD2C,KAErD,MAAO,CAACD,EAAIE,OAAQD,EAAWN,MAAME,GAAqBC,KAAI,SAAAK,GAAC,OAAEA,EAAED,eAInEE,EAAuB7C,OAAO6B,YAAY7B,OAAO8B,QAAQ,YAAI7C,GAAQ8C,QAAO,SAACtB,EAAGa,GAAoC,OAA5Bb,EAAEa,GAAKb,EAAEa,GAAKb,EAAEa,GAAK,EAAI,EAAUb,IAAK,KAAKuB,QAAO,mCAAEC,EAAF,iBAAsBrE,EAASqE,IAASC,MAAMD,OAC1La,EAAa7D,EAAOmD,MAAM,MAAMlC,OAOhCxB,GANoBsB,OAAO8B,QAAQe,GAAsBb,QAAO,YAAkB,IAAD,wBACjF,OADiF,MACjEc,KACjB,GAAG,GACsB9C,OAAO8B,QAAQe,GAAsBb,QAAO,YAAkB,IAAD,wBACrF,OADqF,MACrEc,KACjB,GAAG,GACG9C,OAAO6B,YAAY5C,EAAOmD,MAAM,MAAMG,KAAI,SAAAC,GAAO,IAAD,EAC7BA,EAAKJ,MAAMC,GADkB,mBAChDI,EADgD,KAC3CC,EAD2C,KAErD,MAAO,CAACD,EAAIE,OAAQD,EAAWN,MAAME,GAAqBC,KAAI,SAAAK,GAAC,OAAEA,EAAED,gBAEvEpE,EAAaC,GACbH,EAAaK,IA7BjB,2BAsCG,sBAAKiC,MAAO,CAACoC,gBAAiB,UAAW7B,MAAO,QAASD,OAAQ,QAASD,QAAU,OAAQF,cAAgB,SAAUF,WAAa,UAAnI,UACH,sBAAKD,MAAO,CAACM,OAAS,OAAQ+B,WAAa,IAA3C,sBAEKhD,OAAO8B,QAAQ5D,GAASqE,KAAI,YAAU,IAAD,mBAAP9B,EAAO,KAALN,EAAK,KAClC,OAAO,sBAAKQ,MAAO,CAACI,SAAW,IAAxB,UAA8BN,EAA9B,MAAoCN,WAGnD,sBAAKQ,MAAO,CAACK,QAAS,OAAQH,eAAgB,eAAgBK,MAAO,OAAQD,OAAQ,QAArF,UACI,qBAAKN,MAAO,CACRsC,OAAQ,GACRjC,QAAS,OACTF,cAAe,SACfD,eAAgB,eAChBqC,SAAU,EACVjC,OAAQ,OANZ,SAQKjB,OAAO8B,QAAQ1D,GAAWmE,KAAI,YACyB,IAAD,mBADtBpC,EACsB,KAAjBgD,EAAiB,KAC/CC,EAAchF,EAAU+B,GAAGE,WAAU,SAAAuC,GAAC,OAAI1E,EAAQ0E,KAAOzC,KACzDkD,EAA2BjF,EAAU+B,GAAGD,OAASxB,EAAGyB,GAAGD,OAC3D,OAAO,sBAAKS,MAAO,CACfK,QAAS,OACTsC,aAAc,SACdJ,SAAU,EACVpC,cAAe,MACfG,OAAQ,OACRJ,eAAgB,UANb,UAQH,qBAAKF,MAAO,CACRoC,gBAAiB5C,GAAKH,OAAOC,KAAKvB,GAAIE,GAAS,UAAY,UAC3DsC,MAAO,IAFX,SAGIf,IACHgD,EAAYZ,KAAI,SAACgB,EAAYC,GAAb,OACb,sBAAK7C,MAAO,CACRK,QAAS,OACTkC,SAAU,EACVrC,eAAgB,SAChBD,WAAY,SACZG,SAAU,GACV0C,WAAY,IACZC,UAAW,SACXX,gBAAiBK,GAAeI,EAAkB,UAAYA,GACAH,EAA2B,UAAY,WATzG,UAUIE,EAVJ,mBAahB,qBAAK5C,MAAO,CACRsC,OAAQ,GACRjC,QAAS,OACTF,cAAe,SACfD,eAAgB,eAChBqC,SAAU,EACVjC,OAAQ,OANZ,SAQKjB,OAAO8B,QAAQxD,GAAWiE,KAAI,YACyB,IAAD,mBADtB9B,EACsB,KAAjB0C,EAAiB,KAC/CC,EAAc9E,EAAUmC,GAAGJ,WAAU,SAAAF,GAAC,OAAEA,IAAIjC,EAAQuC,MACpD4C,EAA2B/E,EAAUmC,GAAGP,OAAS1B,EAAGiC,GAAGP,OAC3D,OAAO,sBAAKS,MAAO,CACfK,QAAS,OACTsC,aAAc,SACdJ,SAAU,EACVpC,cAAe,MACfG,OAAQ,OACRJ,eAAgB,UANb,UAQH,qBAAKF,MAAO,CACRoC,gBAAiBtC,GAAKT,OAAOC,KAAKvB,GAAIE,GAAS,UAAY,UAC3DsC,MAAO,IAFX,SAGIT,IACH0C,EAAYZ,KAAI,SAACgB,EAAYC,GAAb,OACb,sBAAK7C,MAAO,CACRK,QAAS,OACTkC,SAAU,EACVrC,eAAgB,SAChBD,WAAY,SACZG,SAAU,GACV0C,WAAY,IACZC,UAAW,SACXX,gBAAiBK,GAAeI,EAAkB,UAAYA,GACAH,EAA2B,UAAY,WATzG,UAUIE,EAVJ,sBAcpB,qBAAK5C,MAAO,CAACO,MAAO,OAAQF,QAAS,OAAQJ,WAAY,SAAUC,eAAgB,UAAnF,SACI,sBAAKa,UAAU,eAAf,UACI,wBAAQf,MAAO,CAACO,MAAO,IAAKS,QAAS,WACjC7B,GAAI,IADR,0BAKA,wBAAQa,MAAO,CAACO,MAAO,IAAKS,QAAS,WACjCvC,GAAO,IADX,0BChOLuE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.948683f9.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\n\n\ntype Matches = { [key: string]: string }\ntype Preferences = { [key: string]: string[] }\n\nfunction isLetter(c : any) {\n    return c.toLowerCase() != c.toUpperCase();\n}\n\nfunction useInterval(callback : any, delay: any) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            // @ts-ignore\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nfunction App() {\n    let [matches, setMatches] = useState<Matches>({})\n\n    let [initialBs,setInitialBs] = useState<Preferences>(null as any);\n\n    let [initialAs, setInitialAs] = useState<Preferences>(null as any);\n\n    let [as, setAs] = useState<Preferences>(null as any);\n    let [bs, setBs] = useState<Preferences>(null as any);\n    let [index, setIndex] = useState(0);\n\n    useEffect(()=>{\n        if(initialAs != null && initialBs != null)\n        {\n            setAs(initialAs);\n            setBs(initialBs);\n        }\n    }, [initialAs,initialBs]);\n\n    let [aInput, setAInput] = useState(\"a1 : b4 \u001f b3 \u001f b1 \u001f b2\\na2 : b2 \u001f b4 \u001f b1 \u001f b3\\na3 : b4 \u001f b1 \u001f b2 \u001f b3\\na4 : b3 \u001f b2 \u001f b1 \u001f b4\");\n    let [bInput, setBInput] = useState(\"b1 : a1 \u001f a3 \u001f a4 \u001f a2\\nb2 : a1 \u001f a3 \u001f a2 \u001f a4\\nb3 : a2 \u001f a1 \u001f a3 \u001f a4\\nb4 : a2 \u001f a4 \u001f a1 \u001f a3\");\n    let [run, setRun] = useState(false);\n\n    useInterval(() => {\n        if(run)\n            foo(false);\n    }, 1000);\n\n    let foo = (cont : boolean) => {\n        if (Object.keys(matches).length !== Object.keys(bs).length) {\n            let b = Object.keys(bs)[index];\n            if (Object.values(matches).findIndex(bMatch => bMatch === b) === -1) {\n                let preferences = bs[b];\n                let preferredMatch = preferences[0];\n                setBs({...bs, [b]: bs[b].slice(1)})\n                if (Object.keys(matches).findIndex(a => a === preferredMatch) === -1) {\n                    setMatches({...matches, [preferredMatch]: b});\n                } else if (as[preferredMatch].indexOf(b) < as[preferredMatch].indexOf(matches[preferredMatch])) {\n                    setMatches({...matches, [preferredMatch]: b});\n                }\n            }\n\n            if (index + 1 === Object.keys(as).length) {\n                setIndex(0);\n            } else {\n                setIndex(index + 1);\n            }\n        }\n    }\n\n    if(as == null || bs == null)\n    {\n        return <div style={{\"display\" : 'flex', alignItems : \"center\", justifyContent : \"center\", flexDirection : \"column\"}}>\n            <div>Please fill in the inputs:</div>\n            <div style={{fontSize : 16}}>Note that we try to guess the separator, so you shoulnd't have to worry about that :)</div>\n        <div style={{display : \"flex\", flexDirection : \"row\", alignItems : \"space-around\", justifyContent : \"space-around\", height : \"70vh\", width : \"100vw\", padding : 128}}>\n            <div>\n            <div>As:</div>\n            <div style={{fontSize : 14}}>(e.g. : a1 : b1,b2,b3)</div>\n            <textarea\n                value={aInput}\n                onChange={(e)=>{\n                setAInput(e.currentTarget.value as any)\n            }} rows={20} cols={64}/>\n            </div>\n            <div>\n            <div>Bs:</div>\n            <div style={{fontSize : 14}}>(e.g. : b1 : a2,a1,a3)</div>\n            <textarea\n                onChange={(e)=> {\n                    setBInput(e.currentTarget.value as any)\n                }}\n                value={bInput} rows={20} cols={64}/>\n            </div>\n        </div>\n            <div className=\"multi-button\">\n            <button style={{width: \"\"}} onClick={(e) => {\n                // @ts-ignore\n                var weirdCharOccurences = Object.fromEntries(Object.entries([...aInput].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {})).filter(([char, occurence])=>!isLetter(char) && isNaN(char)));\n                var lineCount = aInput.split('\\n').length;\n                var keyPairSeparator = Object.entries(weirdCharOccurences).filter(([char, count])=>{\n                    return count == lineCount;\n                })[0][0]\n               var preferenceSeparator =  Object.entries(weirdCharOccurences).filter(([char, count])=>{\n                   return count != lineCount;\n               })[0][0];\n                let as = Object.fromEntries(aInput.split('\\n').map(line=>{\n                    let [key, valueAsStr] = line.split(keyPairSeparator)\n                    return [key.trim(), valueAsStr.split(preferenceSeparator).map(x=>x.trim())]\n                }));\n\n                // @ts-ignore\n                var weirdCharOccurences2 = Object.fromEntries(Object.entries([...bInput].reduce((a, e) => { a[e] = a[e] ? a[e] + 1 : 1; return a }, {})).filter(([char, occurence])=>!isLetter(char) && isNaN(char)));\n                var lineCount2 = bInput.split('\\n').length;\n                var keyPairSeparator2 = Object.entries(weirdCharOccurences2).filter(([char, count])=>{\n                    return count == lineCount2;\n                })[0][0]\n                var preferenceSeparator2 =  Object.entries(weirdCharOccurences2).filter(([char, count])=>{\n                    return count != lineCount2;\n                })[0][0];\n                let bs = Object.fromEntries(bInput.split('\\n').map(line=>{\n                    let [key, valueAsStr] = line.split(keyPairSeparator)\n                    return [key.trim(), valueAsStr.split(preferenceSeparator).map(x=>x.trim())]\n                }));\n                setInitialAs(as);\n                setInitialBs(bs);\n            }}>\n                Continue\n            </button>\n        </div>\n        </div>\n    }\n    else\n    {\n        return <div style={{backgroundColor: \"#ECEFF1\", width: '100vw', height: '100vh', display : 'flex', flexDirection : \"column\", alignItems : \"center\"}}>\n            <div style={{height : \"30vh\", paddingTop : 28}}>\n                Matches :\n                {Object.entries(matches).map(([a,b])=>{\n                    return <div style={{fontSize : 16}}>{a} - {b}</div>\n                })}\n            </div>\n            <div style={{display: \"flex\", justifyContent: \"space-around\", width: \"90vw\", height: \"50vh\"}}>\n                <div style={{\n                    margin: 48,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                    flexGrow: 1,\n                    height: \"80%\"\n                }}>\n                    {Object.entries(initialBs).map(([b\n                                                        , preferences]) => {\n                        let chosenIndex = initialBs[b].findIndex(x => matches[x] === b);\n                        let possibleChoiceStartIndex = initialBs[b].length - bs[b].length;\n                        return <div style={{\n                            display: \"flex\",\n                            alignContent: \"center\",\n                            flexGrow: 1,\n                            flexDirection: \"row\",\n                            height: \"100%\",\n                            justifyContent: \"center\"\n                        }}>\n                            <div style={{\n                                backgroundColor: b == Object.keys(bs)[index] ? \"#FDD835\" : \"#FFEB3B\",\n                                width: 64\n                            }}>{b}</div>\n                            {preferences.map((preference, preferenceIndex) =>\n                                <div style={{\n                                    display: \"flex\",\n                                    flexGrow: 1,\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: 16,\n                                    fontWeight: 1000,\n                                    textAlign: \"center\",\n                                    backgroundColor: chosenIndex == preferenceIndex ? \"#2E7D32\" : preferenceIndex >=\n                                                                                                  possibleChoiceStartIndex ? \"#66BB6A\" : \"#C8E6C9\"\n                                }}>{preference}, </div>)}</div>\n                    })}\n                </div>\n                <div style={{\n                    margin: 48,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                    flexGrow: 1,\n                    height: \"80%\"\n                }}>\n                    {Object.entries(initialAs).map(([a\n                                                        , preferences]) => {\n                        let chosenIndex = initialAs[a].findIndex(b=>b===matches[a]);\n                        let possibleChoiceStartIndex = initialAs[a].length - as[a].length;\n                        return <div style={{\n                            display: \"flex\",\n                            alignContent: \"center\",\n                            flexGrow: 1,\n                            flexDirection: \"row\",\n                            height: \"100%\",\n                            justifyContent: \"center\"\n                        }}>\n                            <div style={{\n                                backgroundColor: a == Object.keys(bs)[index] ? \"#2E7D32\" : \"#66BB6A\",\n                                width: 64\n                            }}>{a}</div>\n                            {preferences.map((preference, preferenceIndex) =>\n                                <div style={{\n                                    display: \"flex\",\n                                    flexGrow: 1,\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    fontSize: 16,\n                                    fontWeight: 1000,\n                                    textAlign: \"center\",\n                                    backgroundColor: chosenIndex == preferenceIndex ? \"#FDD835\" : preferenceIndex >=\n                                                                                                  possibleChoiceStartIndex ? \"#FFEB3B\" : \"#FFF9C4\"\n                                }}>{preference}, </div>)}</div>\n                    })}\n                </div>\n            </div>\n            <div style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                <div className=\"multi-button\">\n                    <button style={{width: \"\"}} onClick={() => {\n                        foo(false);\n                    }}>\n                        Step by step\n                    </button>\n                    <button style={{width: \"\"}} onClick={() => {\n                        setRun(true);\n                    }}>\n                        Run\n                    </button>\n                </div>\n            </div>\n            {/*<div>*/}\n            {/*    {Object.entries(matches).map(([a, b]) => <div>*/}\n            {/*        {b} - {a}*/}\n            {/*    </div>)}*/}\n            {/*</div>*/}\n        </div>\n    }\n\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}